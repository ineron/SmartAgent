/* soapStub.h
   Generated by gSOAP 2.8.14 from soap.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://80.249.178.90:8025/FIT-SPB/"
#define SOAP_NAMESPACE_OF_ns2	"http://v8.1c.ru/8.1/data/core"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20814
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


#ifndef SOAP_TYPE_ns2__AllowedLength
#define SOAP_TYPE_ns2__AllowedLength (85)
/* ns2:AllowedLength */
enum ns2__AllowedLength { ns2__AllowedLength__Fixed = 0, ns2__AllowedLength__Variable = 1 };
#endif

#ifndef SOAP_TYPE_ns2__AllowedSign
#define SOAP_TYPE_ns2__AllowedSign (86)
/* ns2:AllowedSign */
enum ns2__AllowedSign { ns2__AllowedSign__Any = 0, ns2__AllowedSign__Nonnegative = 1 };
#endif

#ifndef SOAP_TYPE_ns2__DateFractions
#define SOAP_TYPE_ns2__DateFractions (88)
/* ns2:DateFractions */
enum ns2__DateFractions { ns2__DateFractions__Date = 0, ns2__DateFractions__Time = 1, ns2__DateFractions__DateTime = 2 };
#endif

#ifndef SOAP_TYPE_ns2__FillCheckErrorStatus
#define SOAP_TYPE_ns2__FillCheckErrorStatus (89)
/* ns2:FillCheckErrorStatus */
enum ns2__FillCheckErrorStatus { ns2__FillCheckErrorStatus__Error = 0, ns2__FillCheckErrorStatus__Warning = 1 };
#endif

#ifndef SOAP_TYPE_ns2__FillChecking
#define SOAP_TYPE_ns2__FillChecking (90)
/* ns2:FillChecking */
enum ns2__FillChecking { ns2__FillChecking__DontCheck = 0, ns2__FillChecking__ShowError = 1 };
#endif

#ifndef SOAP_TYPE_ns2__StandardBeginningDateVariant
#define SOAP_TYPE_ns2__StandardBeginningDateVariant (92)
/* ns2:StandardBeginningDateVariant */
enum ns2__StandardBeginningDateVariant { ns2__StandardBeginningDateVariant__Custom = 0, ns2__StandardBeginningDateVariant__BeginningOfThisDay = 1, ns2__StandardBeginningDateVariant__BeginningOfThisWeek = 2, ns2__StandardBeginningDateVariant__BeginningOfThisTenDays = 3, ns2__StandardBeginningDateVariant__BeginningOfThisMonth = 4, ns2__StandardBeginningDateVariant__BeginningOfThisQuarter = 5, ns2__StandardBeginningDateVariant__BeginningOfThisHalfYear = 6, ns2__StandardBeginningDateVariant__BeginningOfThisYear = 7, ns2__StandardBeginningDateVariant__BeginningOfLastDay = 8, ns2__StandardBeginningDateVariant__BeginningOfLastWeek = 9, ns2__StandardBeginningDateVariant__BeginningOfLastTenDays = 10, ns2__StandardBeginningDateVariant__BeginningOfLastMonth = 11, ns2__StandardBeginningDateVariant__BeginningOfLastQuarter = 12, ns2__StandardBeginningDateVariant__BeginningOfLastHalfYear = 13, ns2__StandardBeginningDateVariant__BeginningOfLastYear = 14, ns2__StandardBeginningDateVariant__BeginningOfNextDay = 15, ns2__StandardBeginningDateVariant__BeginningOfNextWeek = 16, ns2__StandardBeginningDateVariant__BeginningOfNextTenDays = 17, ns2__StandardBeginningDateVariant__BeginningOfNextMonth = 18, ns2__StandardBeginningDateVariant__BeginningOfNextQuarter = 19, ns2__StandardBeginningDateVariant__BeginningOfNextHalfYear = 20, ns2__StandardBeginningDateVariant__BeginningOfNextYear = 21 };
#endif

#ifndef SOAP_TYPE_ns2__StandardPeriodVariant
#define SOAP_TYPE_ns2__StandardPeriodVariant (93)
/* ns2:StandardPeriodVariant */
enum ns2__StandardPeriodVariant { ns2__StandardPeriodVariant__Custom = 0, ns2__StandardPeriodVariant__Today = 1, ns2__StandardPeriodVariant__ThisWeek = 2, ns2__StandardPeriodVariant__ThisTenDays = 3, ns2__StandardPeriodVariant__ThisMonth = 4, ns2__StandardPeriodVariant__ThisQuarter = 5, ns2__StandardPeriodVariant__ThisHalfYear = 6, ns2__StandardPeriodVariant__ThisYear = 7, ns2__StandardPeriodVariant__FromBeginningOfThisWeek = 8, ns2__StandardPeriodVariant__FromBeginningOfThisTenDays = 9, ns2__StandardPeriodVariant__FromBeginningOfThisMonth = 10, ns2__StandardPeriodVariant__FromBeginningOfThisQuarter = 11, ns2__StandardPeriodVariant__FromBeginningOfThisHalfYear = 12, ns2__StandardPeriodVariant__FromBeginningOfThisYear = 13, ns2__StandardPeriodVariant__Yesterday = 14, ns2__StandardPeriodVariant__LastWeek = 15, ns2__StandardPeriodVariant__LastTenDays = 16, ns2__StandardPeriodVariant__LastMonth = 17, ns2__StandardPeriodVariant__LastQuarter = 18, ns2__StandardPeriodVariant__LastHalfYear = 19, ns2__StandardPeriodVariant__LastYear = 20, ns2__StandardPeriodVariant__LastWeekTillSameWeekDay = 21, ns2__StandardPeriodVariant__LastTenDaysTillSameDayNumber = 22, ns2__StandardPeriodVariant__LastMonthTillSameDate = 23, ns2__StandardPeriodVariant__LastQuarterTillSameDate = 24, ns2__StandardPeriodVariant__LastHalfYearTillSameDate = 25, ns2__StandardPeriodVariant__LastYearTillSameDate = 26, ns2__StandardPeriodVariant__Tomorrow = 27, ns2__StandardPeriodVariant__NextWeek = 28, ns2__StandardPeriodVariant__NextTenDays = 29, ns2__StandardPeriodVariant__NextMonth = 30, ns2__StandardPeriodVariant__NextQuarter = 31, ns2__StandardPeriodVariant__NextHalfYear = 32, ns2__StandardPeriodVariant__NextYear = 33, ns2__StandardPeriodVariant__NextWeekTillSameWeekDay = 34, ns2__StandardPeriodVariant__NextTenDaysTillSameDayNumber = 35, ns2__StandardPeriodVariant__NextMonthTillSameDate = 36, ns2__StandardPeriodVariant__NextQuarterTillSameDate = 37, ns2__StandardPeriodVariant__NextHalfYearTillSameDate = 38, ns2__StandardPeriodVariant__NextYearTillSameDate = 39, ns2__StandardPeriodVariant__TillEndOfThisWeek = 40, ns2__StandardPeriodVariant__TillEndOfThisTenDays = 41, ns2__StandardPeriodVariant__TillEndOfThisMonth = 42, ns2__StandardPeriodVariant__TillEndOfThisQuarter = 43, ns2__StandardPeriodVariant__TillEndOfThisHalfYear = 44, ns2__StandardPeriodVariant__TillEndOfThisYear = 45, ns2__StandardPeriodVariant__Last7Days = 46, ns2__StandardPeriodVariant__Next7Days = 47, ns2__StandardPeriodVariant__Month = 48 };
#endif

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (9)
typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (10)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__Object
#define SOAP_TYPE_ns1__Object (20)
/* ns1:Object */
class SOAP_CMAC ns1__Object
{
public:
	std::string StorageTableName;	/* required element of type xsd:string */
	std::string StorageFieldName;	/* required element of type xsd:string */
	std::string FieldName;	/* required element of type xsd:string */
	std::string Metadata;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_ns1__Object */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Object() { ns1__Object::soap_default(NULL); }
	virtual ~ns1__Object() { }
};
#endif

#ifndef SOAP_TYPE_ns1__Structure
#define SOAP_TYPE_ns1__Structure (21)
/* ns1:Structure */
class SOAP_CMAC ns1__Structure
{
public:
	std::vector<ns1__Object * >Objects;	/* required element of type ns1:Object */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__Structure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns1__Structure() { ns1__Structure::soap_default(NULL); }
	virtual ~ns1__Structure() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAmountGoods
#define SOAP_TYPE__ns1__GetAmountGoods (22)
/* ns1:GetAmountGoods */
class SOAP_CMAC _ns1__GetAmountGoods
{
public:
	time_t *Period;	/* optional element of type xsd:dateTime */
	class ns2__Structure *Options;	/* optional element of type ns2:Structure */
	ns2__Structure *Selections;	/* optional element of type ns2:Structure */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE__ns1__GetAmountGoods */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAmountGoods() { _ns1__GetAmountGoods::soap_default(NULL); }
	virtual ~_ns1__GetAmountGoods() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetAmountGoodsResponse
#define SOAP_TYPE__ns1__GetAmountGoodsResponse (23)
/* ns1:GetAmountGoodsResponse */
class SOAP_CMAC _ns1__GetAmountGoodsResponse
{
public:
	class ns2__ValueTable *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE__ns1__GetAmountGoodsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetAmountGoodsResponse() { _ns1__GetAmountGoodsResponse::soap_default(NULL); }
	virtual ~_ns1__GetAmountGoodsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetStructureInfo
#define SOAP_TYPE__ns1__GetStructureInfo (24)
/* ns1:GetStructureInfo */
class SOAP_CMAC _ns1__GetStructureInfo
{
public:
	std::string *TableName;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE__ns1__GetStructureInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetStructureInfo() { _ns1__GetStructureInfo::soap_default(NULL); }
	virtual ~_ns1__GetStructureInfo() { }
};
#endif

#ifndef SOAP_TYPE__ns1__GetStructureInfoResponse
#define SOAP_TYPE__ns1__GetStructureInfoResponse (25)
/* ns1:GetStructureInfoResponse */
class SOAP_CMAC _ns1__GetStructureInfoResponse
{
public:
	ns1__Object *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type ns1:Object */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE__ns1__GetStructureInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetStructureInfoResponse() { _ns1__GetStructureInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetStructureInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f
#define SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f (26)
/* ns1:ДниОтсутствия */
class SOAP_CMAC _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f
{
public:
	time_t _x041d_x0430_x0447_x0430_x043b_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430;	/* required element of type xsd:dateTime */
	time_t _x041a_x043e_x043d_x0435_x0446_x041f_x0435_x0440_x0438_x043e_x0434_x0430;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f() { _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f::soap_default(NULL); }
	virtual ~_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse
#define SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse (27)
/* ns1:ДниОтсутствияResponse */
class SOAP_CMAC _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE__ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse() { _ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse::soap_default(NULL); }
	virtual ~_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b
#define SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b (28)
/* ns1:ИнформационныеБазы */
class SOAP_CMAC _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b() { _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b::soap_default(NULL); }
	virtual ~_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse
#define SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse (29)
/* ns1:ИнформационныеБазыResponse */
class SOAP_CMAC _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE__ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse() { _ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse::soap_default(NULL); }
	virtual ~_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
#define SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 (30)
/* ns1:НеВыполненныйСпрос */
class SOAP_CMAC _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
{
public:
	time_t _x0414_x0430_x0442_x0430_x041d_x0430_x0447_x0430_x043b_x0430;	/* required element of type xsd:dateTime */
	time_t _x0414_x0430_x0442_x0430_x041e_x043a_x043e_x043d_x0447_x0430_x043d_x0438_x044f;	/* required element of type xsd:dateTime */
	bool _x0422_x043e_x043b_x044c_x043a_x043e_x0421_x0435_x0442_x0438;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441() { _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441::soap_default(NULL); }
	virtual ~_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response (31)
/* ns1:НеВыполненныйСпросResponse */
class SOAP_CMAC _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE__ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response() { _ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response::soap_default(NULL); }
	virtual ~_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438
#define SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 (32)
/* ns1:Остатки */
class SOAP_CMAC _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438
{
public:
	std::string _x0414_x0430_x0442_x0430_x041e_x0441_x0442_x0430_x0442_x043a_x043e_x0432;	/* required element of type xsd:date */
	bool _x0423_x0447_x0438_x0442_x044b_x0432_x0430_x0442_x044c_x0421_x0442_x0430_x0442_x0443_x0441_x044b_x0414_x043e_x043a_x0443_x043c_x0435_x043d_x0442_x043e_x0432;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438() { _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438::soap_default(NULL); }
	virtual ~_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response
#define SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response (33)
/* ns1:ОстаткиResponse */
class SOAP_CMAC _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE__ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response() { _ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response::soap_default(NULL); }
	virtual ~_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442
#define SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 (34)
/* ns1:ПолучитьКурсыВалют */
class SOAP_CMAC _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442
{
public:
	time_t *_x041f_x0435_x0440_x0438_x043e_x0434;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442() { _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442::soap_default(NULL); }
	virtual ~_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response
#define SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response (35)
/* ns1:ПолучитьКурсыВалютResponse */
class SOAP_CMAC _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response() { _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response::soap_default(NULL); }
	virtual ~_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b
#define SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b (36)
/* ns1:ПолучитьЦеныНоменклатуры */
class SOAP_CMAC _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b
{
public:
	class ns2__ValueListType *_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x0430;	/* optional element of type ns2:ValueListType */
	ns2__ValueTable *_x0422_x0438_x043f_x044b_x0426_x0435_x043d;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b() { _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b::soap_default(NULL); }
	virtual ~_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse
#define SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse (37)
/* ns1:ПолучитьЦеныНоменклатурыResponse */
class SOAP_CMAC _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE__ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse() { _ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse::soap_default(NULL); }
	virtual ~_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438
#define SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 (38)
/* ns1:Продажи */
class SOAP_CMAC _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438
{
public:
	time_t _x0414_x0430_x0442_x0430_x041d_x0430_x0447_x0430_x043b_x0430;	/* required element of type xsd:dateTime */
	time_t _x0414_x0430_x0442_x0430_x041e_x043a_x043e_x043d_x0447_x0430_x043d_x0438_x044f;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438() { _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438::soap_default(NULL); }
	virtual ~_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response
#define SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response (39)
/* ns1:ПродажиResponse */
class SOAP_CMAC _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE__ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response() { _ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response::soap_default(NULL); }
	virtual ~_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
#define SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 (40)
/* ns1:РасчитатьАномальныйСпрос */
class SOAP_CMAC _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
{
public:
	std::string _x0414_x0430_x0442_x0430_x041e_x0442_x0441_x0447_x0435_x0442_x0430;	/* required element of type xsd:date */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441() { _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441::soap_default(NULL); }
	virtual ~_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response (41)
/* ns1:РасчитатьАномальныйСпросResponse */
class SOAP_CMAC _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE__ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response() { _ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response::soap_default(NULL); }
	virtual ~_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438
#define SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 (42)
/* ns1:ТоварыВПути */
class SOAP_CMAC _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438
{
public:
	time_t _x0414_x0430_x0442_x0430_x041d_x0430_x0447_x0430_x043b_x0430;	/* required element of type xsd:dateTime */
	time_t _x0414_x0430_x0442_x0430_x041e_x043a_x043e_x043d_x0447_x0430_x043d_x0438_x044f;	/* required element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438() { _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438::soap_default(NULL); }
	virtual ~_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response
#define SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response (43)
/* ns1:ТоварыВПутиResponse */
class SOAP_CMAC _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response
{
public:
	std::string return_;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE__ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response() { _ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response::soap_default(NULL); }
	virtual ~_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
#define SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 (44)
/* ns1:УниверсальныйЗапрос */
class SOAP_CMAC _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
{
public:
	std::string *_x0421_x0438_x0441_x0442_x0435_x043c_x043d_x043e_x0435_x0412_x044b_x0440_x0430_x0436_x0435_x043d_x0438_x0435;	/* optional element of type xsd:string */
	std::string *_x041d_x0430_x0438_x043c_x0435_x043d_x043e_x0432_x0430_x043d_x0438_x0435_x0417_x0430_x043f_x0440_x043e_x0441_x0430;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441() { _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441::soap_default(NULL); }
	virtual ~_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response (45)
/* ns1:УниверсальныйЗапросResponse */
class SOAP_CMAC _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE__ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response() { _ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response::soap_default(NULL); }
	virtual ~_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
#define SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 (46)
/* ns1:РасширенныйЗапрос */
class SOAP_CMAC _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
{
public:
	std::string *_x0421_x0438_x0441_x0442_x0435_x043c_x043d_x043e_x0435_x0412_x044b_x0440_x0430_x0436_x0435_x043d_x0438_x0435;	/* optional element of type xsd:string */
	std::string *_x041d_x0430_x0438_x043c_x0435_x043d_x043e_x0432_x0430_x043d_x0438_x0435_x0417_x0430_x043f_x0440_x043e_x0441_x0430;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441() { _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441::soap_default(NULL); }
	virtual ~_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response (47)
/* ns1:РасширенныйЗапросResponse */
class SOAP_CMAC _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
{
public:
	class ns2__ValueTree *return_;	/* optional element of type ns2:ValueTree */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE__ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response() { _ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response::soap_default(NULL); }
	virtual ~_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414
#define SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 (48)
/* ns1:ЦеныНоменклатурыПоГТД */
class SOAP_CMAC _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414
{
public:
	time_t *_x041f_x0435_x0440_x0438_x043e_x0434;	/* optional element of type xsd:dateTime */
	ns2__ValueListType *_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x0430;	/* optional element of type ns2:ValueListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414() { _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414::soap_default(NULL); }
	virtual ~_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response
#define SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response (49)
/* ns1:ЦеныНоменклатурыПоГТДResponse */
class SOAP_CMAC _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response() { _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response::soap_default(NULL); }
	virtual ~_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c
#define SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c (50)
/* ns1:ЦеныНоменклатурыПоПериодам */
class SOAP_CMAC _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c
{
public:
	ns2__ValueListType *_x041f_x0435_x0440_x0438_x043e_x0434_x044b;	/* optional element of type ns2:ValueListType */
	ns2__ValueListType *_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x0430;	/* optional element of type ns2:ValueListType */
	ns2__ValueListType *_x0422_x0438_x043f_x044b_x0426_x0435_x043d;	/* optional element of type ns2:ValueListType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c() { _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c::soap_default(NULL); }
	virtual ~_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse
#define SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse (51)
/* ns1:ЦеныНоменклатурыПоПериодамResponse */
class SOAP_CMAC _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse
{
public:
	ns2__ValueTable *return_;	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse() { _ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse::soap_default(NULL); }
	virtual ~_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435
#define SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 (52)
/* ns1:ЗаписатьДанные */
class SOAP_CMAC _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435
{
public:
	std::string *_x0414_x0430_x043d_x043d_x044b_x0435_x041e_x0431_x044a_x0435_x043a_x0442_x0430;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435() { _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435::soap_default(NULL); }
	virtual ~_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435() { }
};
#endif

#ifndef SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response
#define SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response (53)
/* ns1:ЗаписатьДанныеResponse */
class SOAP_CMAC _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response
{
public:
	bool *return_;	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response() { _ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response::soap_default(NULL); }
	virtual ~_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUniversal
#define SOAP_TYPE__ns1__QueryUniversal (54)
/* ns1:QueryUniversal */
class SOAP_CMAC _ns1__QueryUniversal
{
public:
	std::wstring *SystemExpression;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns1__QueryUniversal */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUniversal() { _ns1__QueryUniversal::soap_default(NULL); }
	virtual ~_ns1__QueryUniversal() { }
};
#endif

#ifndef SOAP_TYPE__ns1__QueryUniversalResponse
#define SOAP_TYPE__ns1__QueryUniversalResponse (55)
/* ns1:QueryUniversalResponse */
class SOAP_CMAC _ns1__QueryUniversalResponse
{
public:
	ns2__ValueTable *return_;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns2:ValueTable */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns1__QueryUniversalResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__QueryUniversalResponse() { _ns1__QueryUniversalResponse::soap_default(NULL); }
	virtual ~_ns1__QueryUniversalResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Array
#define SOAP_TYPE_ns2__Array (56)
/* ns2:Array */
class SOAP_CMAC ns2__Array
{
public:
	std::vector<wchar_t * >Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_ns2__Array */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Array() { ns2__Array::soap_default(NULL); }
	virtual ~ns2__Array() { }
};
#endif

#ifndef SOAP_TYPE_ns2__BinaryDataQualifiers
#define SOAP_TYPE_ns2__BinaryDataQualifiers (57)
/* ns2:BinaryDataQualifiers */
class SOAP_CMAC ns2__BinaryDataQualifiers
{
public:
	std::string Length;	/* required element of type xsd:decimal */
	enum ns2__AllowedLength AllowedLength;	/* required element of type ns2:AllowedLength */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_ns2__BinaryDataQualifiers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__BinaryDataQualifiers() { ns2__BinaryDataQualifiers::soap_default(NULL); }
	virtual ~ns2__BinaryDataQualifiers() { }
};
#endif

#ifndef SOAP_TYPE_ns2__DataFillError
#define SOAP_TYPE_ns2__DataFillError (58)
/* ns2:DataFillError */
class SOAP_CMAC ns2__DataFillError
{
public:
	std::string Data;	/* required element of type xsd:string */
	std::string DataDescr;	/* required element of type xsd:string */
	std::string Text;	/* required element of type xsd:string */
	enum ns2__FillCheckErrorStatus Status;	/* required element of type ns2:FillCheckErrorStatus */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_ns2__DataFillError */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__DataFillError() { ns2__DataFillError::soap_default(NULL); }
	virtual ~ns2__DataFillError() { }
};
#endif

#ifndef SOAP_TYPE_ns2__DataFillErrors
#define SOAP_TYPE_ns2__DataFillErrors (59)
/* ns2:DataFillErrors */
class SOAP_CMAC ns2__DataFillErrors
{
public:
	std::vector<ns2__DataFillError * >item;	/* optional element of type ns2:DataFillError */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_ns2__DataFillErrors */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__DataFillErrors() { ns2__DataFillErrors::soap_default(NULL); }
	virtual ~ns2__DataFillErrors() { }
};
#endif

#ifndef SOAP_TYPE_ns2__DateQualifiers
#define SOAP_TYPE_ns2__DateQualifiers (60)
/* ns2:DateQualifiers */
class SOAP_CMAC ns2__DateQualifiers
{
public:
	enum ns2__DateFractions DateFractions;	/* required element of type ns2:DateFractions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_ns2__DateQualifiers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__DateQualifiers() { ns2__DateQualifiers::soap_default(NULL); }
	virtual ~ns2__DateQualifiers() { }
};
#endif

#ifndef SOAP_TYPE_ns2__FixedArray
#define SOAP_TYPE_ns2__FixedArray (62)
/* ns2:FixedArray */
class SOAP_CMAC ns2__FixedArray
{
public:
	std::vector<char * >Value;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_ns2__FixedArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__FixedArray() { ns2__FixedArray::soap_default(NULL); }
	virtual ~ns2__FixedArray() { }
};
#endif

#ifndef SOAP_TYPE_ns2__FixedMap
#define SOAP_TYPE_ns2__FixedMap (63)
/* ns2:FixedMap */
class SOAP_CMAC ns2__FixedMap
{
public:
	std::vector<class ns2__KeyAndValue * >pair;	/* optional element of type ns2:KeyAndValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_ns2__FixedMap */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__FixedMap() { ns2__FixedMap::soap_default(NULL); }
	virtual ~ns2__FixedMap() { }
};
#endif

#ifndef SOAP_TYPE__ns2__FixedStructure_Property
#define SOAP_TYPE__ns2__FixedStructure_Property (117)
/* ns2:FixedStructure-Property */
class SOAP_CMAC _ns2__FixedStructure_Property
{
public:
	char *Value;	/* optional element of type xsd:anyType */
	std::wstring name;	/* required attribute */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE__ns2__FixedStructure_Property */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__FixedStructure_Property() { _ns2__FixedStructure_Property::soap_default(NULL); }
	virtual ~_ns2__FixedStructure_Property() { }
};
#endif

#ifndef SOAP_TYPE_ns2__FixedStructure
#define SOAP_TYPE_ns2__FixedStructure (64)
/* ns2:FixedStructure */
class SOAP_CMAC ns2__FixedStructure
{
public:
	std::vector<_ns2__FixedStructure_Property >*Property;	/* optional element of type ns2:FixedStructure-Property */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_ns2__FixedStructure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__FixedStructure() { ns2__FixedStructure::soap_default(NULL); }
	virtual ~ns2__FixedStructure() { }
};
#endif

#ifndef SOAP_TYPE_ns2__GenericException
#define SOAP_TYPE_ns2__GenericException (65)
/* ns2:GenericException */
class SOAP_CMAC ns2__GenericException
{
public:
	std::string descr;	/* required element of type xsd:string */
	ns2__GenericException *inner;	/* optional element of type ns2:GenericException */
	std::string clsid;	/* required attribute */
	bool encoded;	/* optional attribute */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_ns2__GenericException */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__GenericException() { ns2__GenericException::soap_default(NULL); }
	virtual ~ns2__GenericException() { }
};
#endif

#ifndef SOAP_TYPE_ns2__KeyAndValue
#define SOAP_TYPE_ns2__KeyAndValue (66)
/* ns2:KeyAndValue */
class SOAP_CMAC ns2__KeyAndValue
{
public:
	char *Key;	/* required element of type xsd:anyType */
	char *Value;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_ns2__KeyAndValue */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__KeyAndValue() { ns2__KeyAndValue::soap_default(NULL); }
	virtual ~ns2__KeyAndValue() { }
};
#endif

#ifndef SOAP_TYPE_ns2__LocalStringItemType
#define SOAP_TYPE_ns2__LocalStringItemType (67)
/* ns2:LocalStringItemType */
class SOAP_CMAC ns2__LocalStringItemType
{
public:
	std::wstring lang;	/* required element of type xsd:NMTOKEN */
	std::string content;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_ns2__LocalStringItemType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__LocalStringItemType() { ns2__LocalStringItemType::soap_default(NULL); }
	virtual ~ns2__LocalStringItemType() { }
};
#endif

#ifndef SOAP_TYPE_ns2__LocalStringType
#define SOAP_TYPE_ns2__LocalStringType (68)
/* ns2:LocalStringType */
class SOAP_CMAC ns2__LocalStringType
{
public:
	std::vector<ns2__LocalStringItemType * >item;	/* optional element of type ns2:LocalStringItemType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_ns2__LocalStringType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__LocalStringType() { ns2__LocalStringType::soap_default(NULL); }
	virtual ~ns2__LocalStringType() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Map
#define SOAP_TYPE_ns2__Map (69)
/* ns2:Map */
class SOAP_CMAC ns2__Map
{
public:
	std::vector<ns2__KeyAndValue * >pair;	/* optional element of type ns2:KeyAndValue */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_ns2__Map */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Map() { ns2__Map::soap_default(NULL); }
	virtual ~ns2__Map() { }
};
#endif

#ifndef SOAP_TYPE_ns2__NumberQualifiers
#define SOAP_TYPE_ns2__NumberQualifiers (70)
/* ns2:NumberQualifiers */
class SOAP_CMAC ns2__NumberQualifiers
{
public:
	std::string Digits;	/* required element of type xsd:decimal */
	std::string FractionDigits;	/* required element of type xsd:decimal */
	enum ns2__AllowedSign AllowedSign;	/* required element of type ns2:AllowedSign */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_ns2__NumberQualifiers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__NumberQualifiers() { ns2__NumberQualifiers::soap_default(NULL); }
	virtual ~ns2__NumberQualifiers() { }
};
#endif

#ifndef SOAP_TYPE_ns2__StandardBeginningDate
#define SOAP_TYPE_ns2__StandardBeginningDate (71)
/* ns2:StandardBeginningDate */
class SOAP_CMAC ns2__StandardBeginningDate
{
public:
	char *variant;	/* required element of type xsd:anyType */
	time_t *date;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_ns2__StandardBeginningDate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__StandardBeginningDate() { ns2__StandardBeginningDate::soap_default(NULL); }
	virtual ~ns2__StandardBeginningDate() { }
};
#endif

#ifndef SOAP_TYPE_ns2__StandardPeriod
#define SOAP_TYPE_ns2__StandardPeriod (72)
/* ns2:StandardPeriod */
class SOAP_CMAC ns2__StandardPeriod
{
public:
	char *variant;	/* required element of type xsd:anyType */
	time_t *startDate;	/* optional element of type xsd:dateTime */
	time_t *endDate;	/* optional element of type xsd:dateTime */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_ns2__StandardPeriod */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__StandardPeriod() { ns2__StandardPeriod::soap_default(NULL); }
	virtual ~ns2__StandardPeriod() { }
};
#endif

#ifndef SOAP_TYPE_ns2__StringQualifiers
#define SOAP_TYPE_ns2__StringQualifiers (73)
/* ns2:StringQualifiers */
class SOAP_CMAC ns2__StringQualifiers
{
public:
	std::string Length;	/* required element of type xsd:decimal */
	enum ns2__AllowedLength AllowedLength;	/* required element of type ns2:AllowedLength */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_ns2__StringQualifiers */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__StringQualifiers() { ns2__StringQualifiers::soap_default(NULL); }
	virtual ~ns2__StringQualifiers() { }
};
#endif

#ifndef SOAP_TYPE__ns2__Structure_Property
#define SOAP_TYPE__ns2__Structure_Property (123)
/* ns2:Structure-Property */
class SOAP_CMAC _ns2__Structure_Property
{
public:
	char *Value;	/* optional element of type xsd:anyType */
	std::wstring name;	/* required attribute */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE__ns2__Structure_Property */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns2__Structure_Property() { _ns2__Structure_Property::soap_default(NULL); }
	virtual ~_ns2__Structure_Property() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Structure
#define SOAP_TYPE_ns2__Structure (74)
/* ns2:Structure */
class SOAP_CMAC ns2__Structure
{
public:
	std::vector<_ns2__Structure_Property >*Property;	/* optional element of type ns2:Structure-Property */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_ns2__Structure */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Structure() { ns2__Structure::soap_default(NULL); }
	virtual ~ns2__Structure() { }
};
#endif

#ifndef SOAP_TYPE_ns2__TypeDescription
#define SOAP_TYPE_ns2__TypeDescription (75)
/* ns2:TypeDescription */
class SOAP_CMAC ns2__TypeDescription
{
public:
	std::vector<std::string >Type;	/* optional element of type xsd:QName */
	std::vector<std::string >TypeSet;	/* optional element of type xsd:QName */
	std::vector<std::string >TypeId;	/* optional element of type ns2:UUID */
	ns2__NumberQualifiers *NumberQualifiers;	/* optional element of type ns2:NumberQualifiers */
	ns2__StringQualifiers *StringQualifiers;	/* optional element of type ns2:StringQualifiers */
	ns2__DateQualifiers *DateQualifiers;	/* optional element of type ns2:DateQualifiers */
	ns2__BinaryDataQualifiers *BinaryDataQualifiers;	/* optional element of type ns2:BinaryDataQualifiers */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_ns2__TypeDescription */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__TypeDescription() { ns2__TypeDescription::soap_default(NULL); }
	virtual ~ns2__TypeDescription() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueListItemType
#define SOAP_TYPE_ns2__ValueListItemType (76)
/* ns2:ValueListItemType */
class SOAP_CMAC ns2__ValueListItemType
{
public:
	char *value;	/* optional element of type xsd:anyType */
	std::string *presentation;	/* optional element of type xsd:string */
	std::string *checkState;	/* optional element of type xsd:decimal */
	char *picture;	/* optional element of type xsd:anyType */
	LONG64 *id;	/* optional element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_ns2__ValueListItemType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueListItemType() { ns2__ValueListItemType::soap_default(NULL); }
	virtual ~ns2__ValueListItemType() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueListType
#define SOAP_TYPE_ns2__ValueListType (77)
/* ns2:ValueListType */
class SOAP_CMAC ns2__ValueListType
{
public:
	ns2__TypeDescription *valueType;	/* required element of type ns2:TypeDescription */
	ns2__ValueListType *availableValues;	/* optional element of type ns2:ValueListType */
	std::vector<ns2__ValueListItemType * >item;	/* optional element of type ns2:ValueListItemType */
	LONG64 *lastId;	/* optional element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns2__ValueListType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueListType() { ns2__ValueListType::soap_default(NULL); }
	virtual ~ns2__ValueListType() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTable
#define SOAP_TYPE_ns2__ValueTable (78)
/* ns2:ValueTable */
class SOAP_CMAC ns2__ValueTable
{
public:
	std::vector<class ns2__ValueTableColumn * >column;	/* optional element of type ns2:ValueTableColumn */
	std::vector<class ns2__ValueTableIndex * >index;	/* optional element of type ns2:ValueTableIndex */
	std::vector<class ns2__ValueTableRow * >row;	/* optional element of type ns2:ValueTableRow */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns2__ValueTable */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTable() { ns2__ValueTable::soap_default(NULL); }
	virtual ~ns2__ValueTable() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTableColumn
#define SOAP_TYPE_ns2__ValueTableColumn (79)
/* ns2:ValueTableColumn */
class SOAP_CMAC ns2__ValueTableColumn
{
public:
	std::wstring *Name;	/* optional element of type xsd:NMTOKEN */
	ns2__TypeDescription *ValueType;	/* optional element of type ns2:TypeDescription */
	std::wstring *Title;	/* optional element of type xsd:string */
	std::string *Width;	/* optional element of type xsd:nonNegativeInteger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns2__ValueTableColumn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTableColumn() { ns2__ValueTableColumn::soap_default(NULL); }
	virtual ~ns2__ValueTableColumn() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTableIndex
#define SOAP_TYPE_ns2__ValueTableIndex (80)
/* ns2:ValueTableIndex */
class SOAP_CMAC ns2__ValueTableIndex
{
public:
	std::vector<std::wstring >column;	/* required element of type xsd:NMTOKEN */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns2__ValueTableIndex */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTableIndex() { ns2__ValueTableIndex::soap_default(NULL); }
	virtual ~ns2__ValueTableIndex() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTableRow
#define SOAP_TYPE_ns2__ValueTableRow (81)
/* ns2:ValueTableRow */
class SOAP_CMAC ns2__ValueTableRow
{
public:
	std::vector<wchar_t * >Value;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns2__ValueTableRow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTableRow() { ns2__ValueTableRow::soap_default(NULL); }
	virtual ~ns2__ValueTableRow() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTree
#define SOAP_TYPE_ns2__ValueTree (82)
/* ns2:ValueTree */
class SOAP_CMAC ns2__ValueTree
{
public:
	std::vector<class ns2__ValueTreeColumn * >column;	/* optional element of type ns2:ValueTreeColumn */
	std::vector<class ns2__ValueTreeRow * >row;	/* optional element of type ns2:ValueTreeRow */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns2__ValueTree */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTree() { ns2__ValueTree::soap_default(NULL); }
	virtual ~ns2__ValueTree() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTreeColumn
#define SOAP_TYPE_ns2__ValueTreeColumn (83)
/* ns2:ValueTreeColumn */
class SOAP_CMAC ns2__ValueTreeColumn
{
public:
	std::wstring *Name;	/* optional element of type xsd:NMTOKEN */
	ns2__TypeDescription *ValueType;	/* optional element of type ns2:TypeDescription */
	std::string *Title;	/* optional element of type xsd:string */
	std::string *Width;	/* optional element of type xsd:nonNegativeInteger */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns2__ValueTreeColumn */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTreeColumn() { ns2__ValueTreeColumn::soap_default(NULL); }
	virtual ~ns2__ValueTreeColumn() { }
};
#endif

#ifndef SOAP_TYPE_ns2__ValueTreeRow
#define SOAP_TYPE_ns2__ValueTreeRow (84)
/* ns2:ValueTreeRow */
class SOAP_CMAC ns2__ValueTreeRow
{
public:
	std::vector<ns2__ValueTreeRow * >row;	/* optional element of type ns2:ValueTreeRow */
	std::vector<char * >Value;	/* optional element of type xsd:anyType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns2__ValueTreeRow */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__ValueTreeRow() { ns2__ValueTreeRow::soap_default(NULL); }
	virtual ~ns2__ValueTreeRow() { }
};
#endif

#ifndef SOAP_TYPE_ns2__Exception
#define SOAP_TYPE_ns2__Exception (61)
/* ns2:Exception */
class SOAP_CMAC ns2__Exception : public ns2__GenericException
{
public:
	xsd__base64Binary *data;	/* optional element of type xsd:base64Binary */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_ns2__Exception */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns2__Exception() { ns2__Exception::soap_default(NULL); }
	virtual ~ns2__Exception() { }
};
#endif

#ifndef SOAP_TYPE___ns1__GetAmountGoods
#define SOAP_TYPE___ns1__GetAmountGoods (155)
/* Operation wrapper: */
struct __ns1__GetAmountGoods
{
public:
	_ns1__GetAmountGoods *ns1__GetAmountGoods;	/* optional element of type ns1:GetAmountGoods */
public:
	int soap_type() const { return 155; } /* = unique id SOAP_TYPE___ns1__GetAmountGoods */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStructureInfo
#define SOAP_TYPE___ns1__GetStructureInfo (159)
/* Operation wrapper: */
struct __ns1__GetStructureInfo
{
public:
	_ns1__GetStructureInfo *ns1__GetStructureInfo;	/* optional element of type ns1:GetStructureInfo */
public:
	int soap_type() const { return 159; } /* = unique id SOAP_TYPE___ns1__GetStructureInfo */
};
#endif

#ifndef SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse
#define SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse (163)
/* Operation wrapper: */
struct __ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse
{
public:
	_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse *ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ДниОтсутствияResponse */
public:
	int soap_type() const { return 163; } /* = unique id SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse */
};
#endif

#ifndef SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f
#define SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f (164)
/* Operation wrapper: */
struct __ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f
{
public:
	_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f *ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f;	/* optional element of type ns1:ДниОтсутствия */
public:
	int soap_type() const { return 164; } /* = unique id SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f */
};
#endif

#ifndef SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse
#define SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse (168)
/* Operation wrapper: */
struct __ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse
{
public:
	_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse *ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ИнформационныеБазыResponse */
public:
	int soap_type() const { return 168; } /* = unique id SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse */
};
#endif

#ifndef SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b
#define SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b (169)
/* Operation wrapper: */
struct __ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b
{
public:
	_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b *ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b;	/* optional element of type ns1:ИнформационныеБазы */
public:
	int soap_type() const { return 169; } /* = unique id SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b */
};
#endif

#ifndef SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response (173)
/* Operation wrapper: */
struct __ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
{
public:
	_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response *ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:НеВыполненныйСпросResponse */
public:
	int soap_type() const { return 173; } /* = unique id SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
#define SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 (174)
/* Operation wrapper: */
struct __ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
{
public:
	_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 *ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441;	/* optional element of type ns1:НеВыполненныйСпрос */
public:
	int soap_type() const { return 174; } /* = unique id SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 */
};
#endif

#ifndef SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response
#define SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response (178)
/* Operation wrapper: */
struct __ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response
{
public:
	_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response *ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ОстаткиResponse */
public:
	int soap_type() const { return 178; } /* = unique id SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438
#define SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 (179)
/* Operation wrapper: */
struct __ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438
{
public:
	_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 *ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438;	/* optional element of type ns1:Остатки */
public:
	int soap_type() const { return 179; } /* = unique id SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response (183)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПолучитьКурсыВалютResponse */
public:
	int soap_type() const { return 183; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 (184)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442;	/* optional element of type ns1:ПолучитьКурсыВалют */
public:
	int soap_type() const { return 184; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse (188)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПолучитьЦеныНоменклатурыResponse */
public:
	int soap_type() const { return 188; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b (189)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b;	/* optional element of type ns1:ПолучитьЦеныНоменклатуры */
public:
	int soap_type() const { return 189; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response
#define SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response (193)
/* Operation wrapper: */
struct __ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response
{
public:
	_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response *ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПродажиResponse */
public:
	int soap_type() const { return 193; } /* = unique id SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438
#define SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 (194)
/* Operation wrapper: */
struct __ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438
{
public:
	_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 *ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438;	/* optional element of type ns1:Продажи */
public:
	int soap_type() const { return 194; } /* = unique id SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response (198)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response
{
public:
	_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response *ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:РасчитатьАномальныйСпросResponse */
public:
	int soap_type() const { return 198; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 (199)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441
{
public:
	_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 *ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441;	/* optional element of type ns1:РасчитатьАномальныйСпрос */
public:
	int soap_type() const { return 199; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response
#define SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response (203)
/* Operation wrapper: */
struct __ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response
{
public:
	_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response *ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ТоварыВПутиResponse */
public:
	int soap_type() const { return 203; } /* = unique id SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438
#define SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 (204)
/* Operation wrapper: */
struct __ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438
{
public:
	_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 *ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438;	/* optional element of type ns1:ТоварыВПути */
public:
	int soap_type() const { return 204; } /* = unique id SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response (208)
/* Operation wrapper: */
struct __ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
{
public:
	_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response *ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:УниверсальныйЗапросResponse */
public:
	int soap_type() const { return 208; } /* = unique id SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
#define SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 (209)
/* Operation wrapper: */
struct __ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
{
public:
	_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 *ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441;	/* optional element of type ns1:УниверсальныйЗапрос */
public:
	int soap_type() const { return 209; } /* = unique id SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response (213)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response
{
public:
	_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response *ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:РасширенныйЗапросResponse */
public:
	int soap_type() const { return 213; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 (214)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441
{
public:
	_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 *ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441;	/* optional element of type ns1:РасширенныйЗапрос */
public:
	int soap_type() const { return 214; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response (218)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЦеныНоменклатурыПоГТДResponse */
public:
	int soap_type() const { return 218; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 (219)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414;	/* optional element of type ns1:ЦеныНоменклатурыПоГТД */
public:
	int soap_type() const { return 219; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse (223)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЦеныНоменклатурыПоПериодамResponse */
public:
	int soap_type() const { return 223; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c (224)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c;	/* optional element of type ns1:ЦеныНоменклатурыПоПериодам */
public:
	int soap_type() const { return 224; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c */
};
#endif

#ifndef SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response
#define SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response (228)
/* Operation wrapper: */
struct __ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response
{
public:
	_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response *ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЗаписатьДанныеResponse */
public:
	int soap_type() const { return 228; } /* = unique id SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435
#define SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 (229)
/* Operation wrapper: */
struct __ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435
{
public:
	_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 *ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435;	/* optional element of type ns1:ЗаписатьДанные */
public:
	int soap_type() const { return 229; } /* = unique id SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUniversal
#define SOAP_TYPE___ns1__QueryUniversal (233)
/* Operation wrapper: */
struct __ns1__QueryUniversal
{
public:
	_ns1__QueryUniversal *ns1__QueryUniversal;	/* optional element of type ns1:QueryUniversal */
public:
	int soap_type() const { return 233; } /* = unique id SOAP_TYPE___ns1__QueryUniversal */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAmountGoods_
#define SOAP_TYPE___ns1__GetAmountGoods_ (235)
/* Operation wrapper: */
struct __ns1__GetAmountGoods_
{
public:
	_ns1__GetAmountGoods *ns1__GetAmountGoods;	/* optional element of type ns1:GetAmountGoods */
public:
	int soap_type() const { return 235; } /* = unique id SOAP_TYPE___ns1__GetAmountGoods_ */
};
#endif

#ifndef SOAP_TYPE___ns1__GetStructureInfo_
#define SOAP_TYPE___ns1__GetStructureInfo_ (237)
/* Operation wrapper: */
struct __ns1__GetStructureInfo_
{
public:
	_ns1__GetStructureInfo *ns1__GetStructureInfo;	/* optional element of type ns1:GetStructureInfo */
public:
	int soap_type() const { return 237; } /* = unique id SOAP_TYPE___ns1__GetStructureInfo_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_Response
#define SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_Response (239)
/* Operation wrapper: */
struct __ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_Response
{
public:
	_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse *ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044fResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ДниОтсутствияResponse */
public:
	int soap_type() const { return 239; } /* = unique id SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_
#define SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_ (240)
/* Operation wrapper: */
struct __ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_
{
public:
	_ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f *ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f;	/* optional element of type ns1:ДниОтсутствия */
public:
	int soap_type() const { return 240; } /* = unique id SOAP_TYPE___ns1___x0414_x043d_x0438_x041e_x0442_x0441_x0443_x0442_x0441_x0442_x0432_x0438_x044f_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_Response
#define SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_Response (242)
/* Operation wrapper: */
struct __ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_Response
{
public:
	_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse *ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044bResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ИнформационныеБазыResponse */
public:
	int soap_type() const { return 242; } /* = unique id SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_
#define SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_ (243)
/* Operation wrapper: */
struct __ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_
{
public:
	_ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b *ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b;	/* optional element of type ns1:ИнформационныеБазы */
public:
	int soap_type() const { return 243; } /* = unique id SOAP_TYPE___ns1___x0418_x043d_x0444_x043e_x0440_x043c_x0430_x0446_x0438_x043e_x043d_x043d_x044b_x0435_x0411_x0430_x0437_x044b_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response
#define SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response (245)
/* Operation wrapper: */
struct __ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response
{
public:
	_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response *ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:НеВыполненныйСпросResponse */
public:
	int soap_type() const { return 245; } /* = unique id SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_
#define SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_ (246)
/* Operation wrapper: */
struct __ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_
{
public:
	_ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 *ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441;	/* optional element of type ns1:НеВыполненныйСпрос */
public:
	int soap_type() const { return 246; } /* = unique id SOAP_TYPE___ns1___x041d_x0435_x0412_x044b_x043f_x043e_x043b_x043d_x0435_x043d_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_Response
#define SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_Response (248)
/* Operation wrapper: */
struct __ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_Response
{
public:
	_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response *ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ОстаткиResponse */
public:
	int soap_type() const { return 248; } /* = unique id SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_
#define SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_ (249)
/* Operation wrapper: */
struct __ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_
{
public:
	_ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438 *ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438;	/* optional element of type ns1:Остатки */
public:
	int soap_type() const { return 249; } /* = unique id SOAP_TYPE___ns1___x041e_x0441_x0442_x0430_x0442_x043a_x0438_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_Response
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_Response (251)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_Response
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПолучитьКурсыВалютResponse */
public:
	int soap_type() const { return 251; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_ (252)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442 *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442;	/* optional element of type ns1:ПолучитьКурсыВалют */
public:
	int soap_type() const { return 252; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x041a_x0443_x0440_x0441_x044b_x0412_x0430_x043b_x044e_x0442_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_Response
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_Response (254)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_Response
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044bResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПолучитьЦеныНоменклатурыResponse */
public:
	int soap_type() const { return 254; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_
#define SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_ (255)
/* Operation wrapper: */
struct __ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_
{
public:
	_ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b *ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b;	/* optional element of type ns1:ПолучитьЦеныНоменклатуры */
public:
	int soap_type() const { return 255; } /* = unique id SOAP_TYPE___ns1___x041f_x043e_x043b_x0443_x0447_x0438_x0442_x044c_x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_Response
#define SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_Response (257)
/* Operation wrapper: */
struct __ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_Response
{
public:
	_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response *ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ПродажиResponse */
public:
	int soap_type() const { return 257; } /* = unique id SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_
#define SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_ (258)
/* Operation wrapper: */
struct __ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_
{
public:
	_ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438 *ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438;	/* optional element of type ns1:Продажи */
public:
	int soap_type() const { return 258; } /* = unique id SOAP_TYPE___ns1___x041f_x0440_x043e_x0434_x0430_x0436_x0438_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response (260)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response
{
public:
	_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response *ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:РасчитатьАномальныйСпросResponse */
public:
	int soap_type() const { return 260; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_ (261)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_
{
public:
	_ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441 *ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441;	/* optional element of type ns1:РасчитатьАномальныйСпрос */
public:
	int soap_type() const { return 261; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0447_x0438_x0442_x0430_x0442_x044c_x0410_x043d_x043e_x043c_x0430_x043b_x044c_x043d_x044b_x0439_x0421_x043f_x0440_x043e_x0441_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_Response
#define SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_Response (263)
/* Operation wrapper: */
struct __ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_Response
{
public:
	_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response *ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ТоварыВПутиResponse */
public:
	int soap_type() const { return 263; } /* = unique id SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_
#define SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_ (264)
/* Operation wrapper: */
struct __ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_
{
public:
	_ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438 *ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438;	/* optional element of type ns1:ТоварыВПути */
public:
	int soap_type() const { return 264; } /* = unique id SOAP_TYPE___ns1___x0422_x043e_x0432_x0430_x0440_x044b_x0412_x041f_x0443_x0442_x0438_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response
#define SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response (266)
/* Operation wrapper: */
struct __ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response
{
public:
	_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response *ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:УниверсальныйЗапросResponse */
public:
	int soap_type() const { return 266; } /* = unique id SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_
#define SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_ (267)
/* Operation wrapper: */
struct __ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_
{
public:
	_ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 *ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441;	/* optional element of type ns1:УниверсальныйЗапрос */
public:
	int soap_type() const { return 267; } /* = unique id SOAP_TYPE___ns1___x0423_x043d_x0438_x0432_x0435_x0440_x0441_x0430_x043b_x044c_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response (269)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response
{
public:
	_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response *ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:РасширенныйЗапросResponse */
public:
	int soap_type() const { return 269; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_
#define SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_ (270)
/* Operation wrapper: */
struct __ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_
{
public:
	_ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441 *ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441;	/* optional element of type ns1:РасширенныйЗапрос */
public:
	int soap_type() const { return 270; } /* = unique id SOAP_TYPE___ns1___x0420_x0430_x0441_x0448_x0438_x0440_x0435_x043d_x043d_x044b_x0439_x0417_x0430_x043f_x0440_x043e_x0441_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_Response
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_Response (272)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_Response
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЦеныНоменклатурыПоГТДResponse */
public:
	int soap_type() const { return 272; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_ (273)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414 *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414;	/* optional element of type ns1:ЦеныНоменклатурыПоГТД */
public:
	int soap_type() const { return 273; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x0413_x0422_x0414_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_Response
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_Response (275)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_Response
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043cResponse;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЦеныНоменклатурыПоПериодамResponse */
public:
	int soap_type() const { return 275; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_
#define SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_ (276)
/* Operation wrapper: */
struct __ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_
{
public:
	_ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c *ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c;	/* optional element of type ns1:ЦеныНоменклатурыПоПериодам */
public:
	int soap_type() const { return 276; } /* = unique id SOAP_TYPE___ns1___x0426_x0435_x043d_x044b_x041d_x043e_x043c_x0435_x043d_x043a_x043b_x0430_x0442_x0443_x0440_x044b_x041f_x043e_x041f_x0435_x0440_x0438_x043e_x0434_x0430_x043c_ */
};
#endif

#ifndef SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_Response
#define SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_Response (278)
/* Operation wrapper: */
struct __ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_Response
{
public:
	_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response *ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435Response;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns1:ЗаписатьДанныеResponse */
public:
	int soap_type() const { return 278; } /* = unique id SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_Response */
};
#endif

#ifndef SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_
#define SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_ (279)
/* Operation wrapper: */
struct __ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_
{
public:
	_ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435 *ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435;	/* optional element of type ns1:ЗаписатьДанные */
public:
	int soap_type() const { return 279; } /* = unique id SOAP_TYPE___ns1___x0417_x0430_x043f_x0438_x0441_x0430_x0442_x044c_x0414_x0430_x043d_x043d_x044b_x0435_ */
};
#endif

#ifndef SOAP_TYPE___ns1__QueryUniversal_
#define SOAP_TYPE___ns1__QueryUniversal_ (281)
/* Operation wrapper: */
struct __ns1__QueryUniversal_
{
public:
	_ns1__QueryUniversal *ns1__QueryUniversal;	/* optional element of type ns1:QueryUniversal */
public:
	int soap_type() const { return 281; } /* = unique id SOAP_TYPE___ns1__QueryUniversal_ */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (282)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 282; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (283)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 283; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (285)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 285; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (288)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 288; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (289)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 289; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__NMTOKEN
#define SOAP_TYPE_xsd__NMTOKEN (16)
typedef std::wstring xsd__NMTOKEN;
#endif

#ifndef SOAP_TYPE_xsd__date
#define SOAP_TYPE_xsd__date (17)
typedef std::string xsd__date;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (18)
typedef std::string xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__nonNegativeInteger
#define SOAP_TYPE_xsd__nonNegativeInteger (19)
typedef std::string xsd__nonNegativeInteger;
#endif

#ifndef SOAP_TYPE_ns2__CompositeID
#define SOAP_TYPE_ns2__CompositeID (87)
typedef std::string ns2__CompositeID;
#endif

#ifndef SOAP_TYPE_ns2__Null
#define SOAP_TYPE_ns2__Null (91)
typedef std::string ns2__Null;
#endif

#ifndef SOAP_TYPE_ns2__Type
#define SOAP_TYPE_ns2__Type (94)
typedef std::string ns2__Type;
#endif

#ifndef SOAP_TYPE_ns2__UUID
#define SOAP_TYPE_ns2__UUID (95)
typedef std::string ns2__UUID;
#endif

#ifndef SOAP_TYPE_ns2__ValueStorage
#define SOAP_TYPE_ns2__ValueStorage (96)
typedef xsd__base64Binary ns2__ValueStorage;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
